# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'D:\Pictures\Projects\Python\epam_progects\price_checker_gui\checker.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from work_functions import create, checker_objects, show_list, del_ch_obj, clear, ch_set_delay
from PyQt5.QtWidgets import QMessageBox

MANAGE_BUTTON_TEXT1 = "Просмотреть"
MANAGE_BUTTON_TEXT2 = "Удалить"
BACK_TEXT = "Назад"
SETTINGS_BUTTON_TEXT1 = "Настройки"
SETTINGS_BUTTON_TEXT2 = "Изменить"


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(476, 138)
        MainWindow.setStyleSheet("background-color: rgb(63, 63, 63);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.CreateButton = QtWidgets.QPushButton(self.centralwidget)
        self.CreateButton.setGeometry(QtCore.QRect(10, 80, 151, 51))
        self.CreateButton.setStyleSheet("background-color: rgb(116, 116, 116);")
        self.CreateButton.setObjectName("CreateButton")
        self.checkBox = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox.setGeometry(QtCore.QRect(170, 110, 201, 21))
        self.checkBox.setStyleSheet("color: rgb(255, 255, 255);")
        self.checkBox.setObjectName("checkBox")
        self.UrlTextField = QtWidgets.QTextBrowser(self.centralwidget)
        self.UrlTextField.setGeometry(QtCore.QRect(10, 10, 371, 61))
        self.UrlTextField.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.UrlTextField.setLocale(QtCore.QLocale(QtCore.QLocale.English, QtCore.QLocale.UnitedStates))
        self.UrlTextField.setReadOnly(False)
        self.UrlTextField.setObjectName("UrlTextField")
        self.TimeTextField = QtWidgets.QTextBrowser(self.centralwidget)
        self.TimeTextField.setGeometry(QtCore.QRect(170, 80, 201, 31))
        self.TimeTextField.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.TimeTextField.setReadOnly(False)
        self.TimeTextField.setObjectName("TimeTextField")
        self.ManageButton = QtWidgets.QPushButton(self.centralwidget)
        self.ManageButton.setGeometry(QtCore.QRect(390, 10, 81, 51))
        self.ManageButton.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.ManageButton.setAutoFillBackground(False)
        self.ManageButton.setStyleSheet("background-color: rgb(116, 116, 116);")
        self.ManageButton.setAutoRepeat(False)
        self.ManageButton.setAutoExclusive(False)
        self.ManageButton.setObjectName("ManageButton")
        self.SettingsButton = QtWidgets.QPushButton(self.centralwidget)
        self.SettingsButton.setGeometry(QtCore.QRect(390, 80, 81, 51))
        self.SettingsButton.setStyleSheet("background-color: rgb(116, 116, 116);")
        self.SettingsButton.setObjectName("SettingsButton")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # *
        self.add_functions()
        self.show_flag = True
        # *

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Price Checker"))
        self.CreateButton.setText(_translate("MainWindow", "Создать"))
        self.checkBox.setText(_translate("MainWindow", "Уведомлять только о снижении"))
        self.UrlTextField.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Введите URL</p></body></html>"))
        self.TimeTextField.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Интервал проверки: dd-hh-mm</p></body></html>"))
        self.ManageButton.setText(_translate("MainWindow", "Просмотреть"))
        self.SettingsButton.setText(_translate("MainWindow", "Команда"))

    # *
    def add_functions(self):
        self.CreateButton.clicked.connect(self.create_checker)
        self.ManageButton.clicked.connect(self.show)
        self.SettingsButton.clicked.connect(self.command)

    def error_message(self, text:str):
        self.error = QMessageBox()
        self.error.setWindowTitle('Error')
        self.error.setIcon(QMessageBox.Warning)
        self.error.setStandardButtons(QMessageBox.Ok)
        self.error.setText(text)
        self.error.exec_()

    def create_checker(self):
        #print(self.checkBox.isChecked())

        try:
            delay = self.TimeTextField.toPlainText()
            url = self.UrlTextField.toPlainText()
            create(url, delay, self.checkBox.isChecked())
            self.UrlTextField.setText('')
            self.TimeTextField.setText('')
            #print(checker_objects)
        except AttributeError:
            self.error_message('Error: Invalid URL')

            print('Error: Invalid URL')
        except ValueError:
            self.error_message('Error: Invalid delay format')
            #error.exec_()
            #print('Error: Invalid delay format')
        except KeyError:
            self.error_message('The URL is incorrect or this marketplace is not supported yet')
            #error.exec_()
            #print('The URL is incorrect or this marketplace is not supported yet')
        except Exception as e:
            self.error_message(f'Error: {e}')
            #error.exec_()
            #print(e, type(e))



    def show(self):
        if self.show_flag:
            self.UrlTextField.setText(show_list())
        else:
            self.UrlTextField.setText('')
        self.show_flag = not self.show_flag

    def command(self):

        com = self.TimeTextField.toPlainText()
        com = com.split(' ')
        #print(com)
        if com[0] == 'del':
            del_ch_obj(int(com[1]))
            self.TimeTextField.setText(f'Объект {com[1]}) удален')
        elif com[0] == 'set':
            ch_set_delay(int(com[1]), com[2])
            self.TimeTextField.setText(f'Задержка изменена')
        elif com[0] == '!clear':
            clear()
            self.TimeTextField.setText(f'Память очищена')
        else:
            self.error_message('Unknown command')

    # *

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
